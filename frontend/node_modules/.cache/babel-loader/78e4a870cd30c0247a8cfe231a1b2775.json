{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_REVIEW_SAVE_REQUEST, PRODUCT_REVIEW_SAVE_FAIL, PRODUCT_REVIEW_SAVE_SUCCESS } from '../constants/productConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listProducts = (category = '', searchKeyword = '', sortOrder = '') => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/products?category=' + category + '&searchKeyword=' + searchKeyword + '&sortOrder=' + sortOrder);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProdcut = productId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete('/api/products/' + productId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo: {\n          token\n        }\n      }\n    } = getState();\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_REQUEST,\n      payload: review\n    });\n    const {\n      data\n    } = await axios.post(`/api/products/${productId}/reviews`, review, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // report error\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct, deleteProdcut, saveProductReview };","map":{"version":3,"sources":["/Users/nobleprince/dev/courses/cam-mora/react-shopping-cart/frontend/src/actions/productAction.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_REVIEW_SAVE_REQUEST","PRODUCT_REVIEW_SAVE_FAIL","PRODUCT_REVIEW_SAVE_SUCCESS","axios","Axios","listProducts","category","searchKeyword","sortOrder","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","userSignin","userInfo","_id","post","headers","Authorization","token","put","detailsProduct","productId","deleteProdcut","delete","success","saveProductReview","review"],"mappings":"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","sourcesContent":["import {\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n    PRODUCT_SAVE_REQUEST,\n    PRODUCT_SAVE_SUCCESS,\n    PRODUCT_SAVE_FAIL,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_REVIEW_SAVE_REQUEST,\n    PRODUCT_REVIEW_SAVE_FAIL,\n    PRODUCT_REVIEW_SAVE_SUCCESS,\n} from '../constants/productConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listProducts = (\n    category = '',\n    searchKeyword = '',\n    sortOrder = ''\n) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST });\n        const { data } = await axios.get(\n            '/api/products?category=' +\n            category +\n            '&searchKeyword=' +\n            searchKeyword +\n            '&sortOrder=' +\n            sortOrder\n        );\n        dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n    } catch (error) {\n        dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n    }\n};\n\nconst saveProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\n        const {\n            userSignin: { userInfo },\n        } = getState();\n        if (!product._id) {\n            const { data } = await Axios.post('/api/products', product, {\n                headers: {\n                    Authorization: 'Bearer ' + userInfo.token,\n                },\n            });\n            dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n        } else {\n            const { data } = await Axios.put(\n                '/api/products/' + product._id,\n                product,\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + userInfo.token,\n                    },\n                }\n            );\n            dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n        }\n    } catch (error) {\n        dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\n    }\n};\n\nconst detailsProduct = (productId) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n        const { data } = await axios.get('/api/products/' + productId);\n        dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n        dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\n    }\n};\n\nconst deleteProdcut = (productId) => async (dispatch, getState) => {\n    try {\n        const {\n            userSignin: { userInfo },\n        } = getState();\n        dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId });\n        const { data } = await axios.delete('/api/products/' + productId, {\n            headers: {\n                Authorization: 'Bearer ' + userInfo.token,\n            },\n        });\n        dispatch({ type: PRODUCT_DELETE_SUCCESS, payload: data, success: true });\n    } catch (error) {\n        dispatch({ type: PRODUCT_DELETE_FAIL, payload: error.message });\n    }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n        const {\n            userSignin: {\n                userInfo: { token },\n            },\n        } = getState();\n        dispatch({ type: PRODUCT_REVIEW_SAVE_REQUEST, payload: review });\n        const { data } = await axios.post(\n            `/api/products/${productId}/reviews`,\n            review,\n            {\n                headers: {\n                    Authorization: 'Bearer ' + token,\n                },\n            }\n        );\n        dispatch({ type: PRODUCT_REVIEW_SAVE_SUCCESS, payload: data });\n    } catch (error) {\n        // report error\n        dispatch({ type: PRODUCT_REVIEW_SAVE_FAIL, payload: error.message });\n    }\n};\n\nexport {\n    listProducts,\n    detailsProduct,\n    saveProduct,\n    deleteProdcut,\n    saveProductReview,\n};"]},"metadata":{},"sourceType":"module"}